'================Функции=============='
# функция - именнованный блок кода, который может принимать аргументы и возвращать результат

# def my_sum(x, y):
#     print('hello')
#     res = x + y
#     print(res)
    
# res = my_sum(13, 5)
# res2 = my_sum(4, 2)



len([23, 2, 1])
len('hello') 

def my_len(x):
    count = 0
    for i in x:
        count += 1
    return count 

print(my_len([23, 2, 1]))
print(my_len('hello')) 

count = 0
for i in [23, 1, 4]:
    count += 1
print(count)
 
count = 0
for i in 'hello':
    count += 1
print(count)
 
'===============Аргументы и параметры======='
# параметры - переменные внутри функци, значения которым мы задаем при вызове функций
# аргументы - значения, которые мы передаем при вызове функции

def func(a, b): # параметры
    pass 

func(12, 2) # аргументы
func(1,1) # аргументы

'==============Виды параметров============'
# 1. обязательные
# 2. необязательные
#    1) с дефолтом (со значением по умолчанию)
#     2) args (все позиционные аргументы, которые не попали в обязательные и с дефолтом)
#      3) kwargs (все лишние именнованные аргументы)

def func(x, y, z=10, *args, **kwargs):
    print(x+y+z, args, kwargs)

func(3, 5, 12, 2, 1, 11, 2, 4, name='katana', age=22)


'===============Виды аргументов============'
# 1. позиционные (по позиции)
# 2. именнованные (по названию (параметр=значение))

def func(a, b):
    pass 

func(b=3, a=5)

'===============Lambda==============='
# lambda - это анонимная функция, которая записывается в одну строку

lambda_func = lambda x: x ** 10
print(lambda_func(2))

def func_hi(x):
    return x ** 10
print(func_hi(2))