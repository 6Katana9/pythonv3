# # '=============Comprehensions============'
# # # генератор, с помощью которого мы можем создать последовательность используя цикл for в одну строку

# # # результат for элемент in последовательность
# # # результат for элемент in последовательность if фильтр

# # compr = (i*2 for i in range(1,6)) #2, 4, 6, 8, 10
# # print(compr)

# # # генератор - итерируемый обьект, который не хранит в себе полностью всю последовательность данных, а создает их когда требуется

# # # next - функция, которая запрашивает у генератора текущий элемент и генератор создает следующий элемент

# # # print(next(compr)) # 2
# # # print(next(compr)) # 4
# # # print(next(compr)) # 6
# # # print(next(compr)) # 8
# # # print(next(compr)) # 10
# # # print(next(compr)) # StopIteration

# # # print(list(compr))


# # compr2 = list((i+10 for i in range(1,6)))
# # # [11, 12, 13, 14, 15]

# # compr2 = [i + 10 for i in range(1, 6)]
# # # [11, 12, 13, 14, 15]

# # # создайте список из 5 элементов, которые строки 'hello'
# # # ['hello', 'hello', 'hello', 'hello', 'hello']

# # # list_1 = {i:'hello' for i in range(1, 6)}
# # # print(list_1)


# # # условия в compehension
# # # 1. Тернарный оператор, if else
# # # 2. Фильтр, if

# # list_1 = [23, -1, 3, 0, -12, 45, -3, 0]
# # list_2 = ['+' if i > 0 else '-' for i in list_1]
# # print(list_2) # ['+', '-', '+', '-', '+', '-']

# # list_3 = [i for i in list_1 if i > 0]
# # print(list_3) # [23, 3, 45]

# # list_4 = ['+' if i > 0 else '-' for i in list_1 if i != 0]
# # print(list_4)

# # # List Comprehension - 5 задач
# #     # • 1. Создай список квадратов чисел от 1 до 10 с помощью list comprehension.
    
# # list_ = [i**2 for i in range(1,11)]

    
# #     # • 2. Из списка чисел оставь только чётные числа, используя list comprehension.
# # list_ = [12, 23, 2, 12, 9, 4,5]
# # result = [i for i in list_ if i % 2 == 0]

# #     # • 3. Преобразуй список строк в список их длин с помощью list comprehension.
    
# # list_ = ['hi', 'metalabs', 'hello']
# # result = [len(i) for i in list_]

# #     # • 4. Замени все отрицательные числа в списке на 0, используя list comprehension.

# # list_ = [12, 4, -5, -9, 0]
# # result = [0 if i < 0 else i for i in list_]
# # print(result)
# #     # • 5. Преобразуй список слов в список, где каждое слово написано в верхнем регистре.

# # list_ = ['hello', 'hi', 'metalabs']
# # result = [ i.upper() for i in list_ ]
# # print(result)





# # # Try-Except - 5 задач
# # #     • 1. Напиши программу, которая делит 10 на число, введённое пользователем. Обработай ошибку деления на ноль.

# try:
#     num = int(input('enter number: '))
#     result = 10 / num 
# except ZeroDivisionError:
#     print('на ноль делить нельзя')

# # #     • 2. Напиши программу, которая запрашивает у пользователя число и преобразует его в int. Обработай ошибку, если пользователь ввел текст.

# try:
#     number = int(input('Enter number'))
# except ValueError:
#     print('Попробуй еще')
# # #     • 3. Напиши код, который открывает файл и читает его содержимое. Обработай ошибку, если файл не найден.

# # try:
# #     with open

# # #     • 4. Программа должна извлечь элемент из списка по индексу, который вводит пользователь. Обработай ошибку выхода за пределы списка.

# try:
#     list_ = [1,23,3,4,5,6,7,7]
#     print(list_[int(input())])
# except IndexError:
#     print('error')

# # #     • 5. Напиши код, который складывает два значения, введённые пользователем. Обработай ошибку, если введены несовместимые типы (например, строка и число).

try:
    num1, num2 = input(), int(input())
    print(num1 + num2)
except TypeError:
    print('error')


#  напишите функцию которая принимает число, если число положительное то пусть выйдет слово положительное, если число отрицательное то пусть выйдет слово отрицательное и если 0 то 0